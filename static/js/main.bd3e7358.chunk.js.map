{"version":3,"sources":["components/App.js","helpers.js","serviceWorker.js","index.js","audio/beep1.mp3"],"names":["library","add","faArrowAltCircleUp","faArrowAltCircleDown","App","_useState","useState","_useState2","Object","slicedToArray","breakLength","setBreakLength","_useState3","_useState4","sessionLength","setSessionLength","_useState5","_useState6","currentTimerLabel","setCurrentTimerLabel","_useState7","_useState8","isTimerRunning","setIsTimerRunning","_useState9","_useState10","seconds","setSeconds","setSecondsWhenStopped","currentLength","label","decrement","setLength","increment","useEffect","interval","document","getElementById","play","setInterval","clearInterval","currentTime","minutes","divisor_for_minutes","mm","Math","floor","divisor_for_seconds","ss","ceil","secondsToTime","react_default","a","createElement","className","id","onClick","audio","pause","stopAudio","src","sound","Boolean","window","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bd3e7358.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faArrowAltCircleUp,\n  faArrowAltCircleDown\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { secondsToTime } from \"../helpers\";\nimport \"../css/App.css\";\nimport sound from \"../audio/beep1.mp3\";\n\nlibrary.add(faArrowAltCircleUp);\nlibrary.add(faArrowAltCircleDown);\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [currentTimerLabel, setCurrentTimerLabel] = useState(\"Session\");\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [seconds, setSeconds] = useState(25 * 60);\n\n  const playAudio = () => {\n    document.getElementById(\"beep\").play();\n  };\n\n  const stopAudio = () => {\n    const audio = document.getElementById(\"beep\");\n    audio.currentTime = 0;\n    audio.pause();\n  };\n\n  const resetTimer = () => {\n    setBreakLength(5);\n    setSessionLength(25);\n    setCurrentTimerLabel(\"Session\");\n    setSeconds(25 * 60);\n    setIsTimerRunning(false);\n    stopAudio();\n  };\n\n  const setSecondsWhenStopped = (currentLength, label) => {\n    if (!isTimerRunning) {\n      if (label === currentTimerLabel) {\n        setSeconds(currentLength * 60);\n      }\n    }\n  };\n\n  const decrement = (currentLength, setLength, label) => {\n    if (currentLength > 1) {\n      setLength(currentLength - 1);\n      setSecondsWhenStopped(currentLength - 1, label);\n    }\n  };\n\n  const increment = (currentLength, setLength, label) => {\n    if (currentLength < 60) {\n      setLength(currentLength + 1);\n      setSecondsWhenStopped(currentLength + 1, label);\n    }\n  };\n\n  const toggleTimer = () => {\n    setIsTimerRunning(!isTimerRunning);\n  };\n\n  const switchTimer = () => {\n    setSeconds(\n      currentTimerLabel === \"Session\" ? breakLength * 60 : sessionLength * 60\n    );\n    setCurrentTimerLabel(currentTimerLabel === \"Session\" ? \"Break\" : \"Session\");\n  };\n\n  useEffect(() => {\n    let interval = null;\n    if (isTimerRunning) {\n      if (seconds === 0) {\n        playAudio();\n        switchTimer();\n      }\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (!isTimerRunning && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerRunning, seconds]);\n\n  const currentTime = secondsToTime(seconds);\n  return (\n    <div className=\"app-container\">\n      <div className=\"break-container\">\n        <label id=\"break-label\">Break Length</label>\n        <div id=\"break-length\">{breakLength}</div>\n        <button\n          id=\"break-decrement\"\n          onClick={() => decrement(breakLength, setBreakLength, \"Break\")}\n        >\n          Decrement\n        </button>\n        <button\n          id=\"break-increment\"\n          onClick={() => increment(breakLength, setBreakLength, \"Break\")}\n        >\n          Increment\n        </button>\n      </div>\n\n      <div className=\"session-container\">\n        <label id=\"session-label\">Session Length</label>\n        <div id=\"session-length\">{sessionLength}</div>\n        <button\n          id=\"session-decrement\"\n          onClick={() => decrement(sessionLength, setSessionLength, \"Session\")}\n        >\n          Decrement\n        </button>\n        <button\n          id=\"session-increment\"\n          onClick={() => increment(sessionLength, setSessionLength, \"Session\")}\n        >\n          Increment\n        </button>\n      </div>\n\n      <div className=\"timer-container\">\n        <label id=\"timer-label\">{currentTimerLabel}</label>\n        <div id=\"time-left\">\n          {currentTime.minutes + \":\" + currentTime.seconds}\n        </div>\n        <button id=\"start_stop\" onClick={toggleTimer}>\n          {isTimerRunning ? \"Pause\" : \"Start\"}\n        </button>\n        <button id=\"reset\" onClick={resetTimer}>\n          Reset\n        </button>\n        <audio id=\"beep\" src={sound} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export function secondsToTime(seconds) {\n  if (seconds === 3600) {\n    return {\n      minutes: 60,\n      seconds: \"00\"\n    };\n  }\n  let divisor_for_minutes = seconds % (60 * 60);\n  let mm = Math.floor(divisor_for_minutes / 60);\n\n  let divisor_for_seconds = divisor_for_minutes % 60;\n  let ss = Math.ceil(divisor_for_seconds);\n  if (mm < 10) {\n    mm = \"0\" + mm;\n  }\n  if (ss < 10) {\n    ss = \"0\" + ss;\n  }\n  let time = {\n    minutes: mm,\n    seconds: ss\n  };\n  return time;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/beep1.1c004368.mp3\";"],"sourceRoot":""}